name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  check_changes:
    name: Check files
    outputs:
      docker_changes: ${{ steps.changes_docker.outputs.src }}
      gke_cluster_changes: ${{ steps.changes_terraform_gke_cluster.outputs.src }}
      helm_release_changes: ${{ steps.changes_terraform_helm_release.outputs.src }}
    runs-on: ubuntu-latest
    steps:
      - uses: dorny/paths-filter@v2
        id: changes_docker
        with:
          filters: |
            src:
              - '*.go'
              - 'go.mod'
              - 'Dockerfile'

      - uses: dorny/paths-filter@v2
        id: changes_terraform_gke_cluster
        with:
          filters: |
            src:
              - './terraform/gke-cluster/**'
      
      - uses: dorny/paths-filter@v2
        id: changes_terraform_helm_release
        with:
          filters: |
            src:
              - './terraform/helm-release/**'

  docker:
    needs: check_changes
    if: needs.check_changes.outputs.docker_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/codeexecute:latest

  terraform_gke_cluster:
    needs: check_changes
    if: needs.check_changes.outputs.gke_cluster_changes == 'true'
    name: "Terraform GKE Cluster"
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/gke-cluster
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./terraform/gke-cluster
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform/gke-cluster
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # On push to main, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: ./terraform/gke-cluster
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

  terraform_helm_release:
    needs: ["check_changes", "docker", "terraform_gke_cluster"]
    if: needs.check_changes.outputs.docker_changes == 'true' || needs.check_changes.outputs.gke_cluster_changes == 'true' || needs.check_changes.outputs.helm_release_changes == 'true'
    name: "Terraform Helm Release"
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/helm-release
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./terraform/helm-release
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform/helm-release
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_VAR_bot_token: ${{ secrets.BOT_TOKEN }}
        TF_VAR_image_tag: "latest"

    # On push to main, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: ./terraform/helm-release
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_VAR_bot_token: ${{ secrets.BOT_TOKEN }}
        TF_VAR_image_tag: "latest"
