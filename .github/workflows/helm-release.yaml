name: "Helm Release"

on:
  push:
    branches:
    - 'main'
  workflow_run:
    workflows: ["Docker"]
    types:
      - completed
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  terraform_helm_release:
    name: "Terraform Helm Release"
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Find Tag
      id: tagger
      uses: jimschubert/query-tag-action@v1
      with:
        include: 'v*'
        commit-ish: 'HEAD'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./terraform/helm-release
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform/helm-release
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform/helm-release
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_VAR_bot_token: ${{ secrets.BOT_TOKEN }}
        TF_VAR_image_tag: ${{steps.tagger.outputs.tag}}

    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && ${{ github.event_name != 'pull_request' }}
      run: terraform apply -auto-approve
      working-directory: ./terraform/helm-release
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_VAR_bot_token: ${{ secrets.BOT_TOKEN }}
        TF_VAR_image_tag: ${{steps.tagger.outputs.tag}}
